# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: 
   workflow-dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  testing:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: 'true'
          submodules: true

      - name: Build
        env:
          CI: TEST
        run: |
          sudo apt update
          sudo apt install -y g++-8 gcc-8 colordiff coreutils graphviz inkscape make git git-lfs unzip cmake
          make env

  build:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: 'true'
          submodules: true
      - name: Build
        run: |
          sudo rm -rf /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          sudo apt update
          sudo apt install -y g++-8 gcc-8 colordiff coreutils graphviz inkscape make git git-lfs unzip cmake
          mkdir .tmp
          curl -L https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-linux.zip -o .tmp/ninja-linux.zip
          unzip .tmp/ninja-linux.zip -d .tmp
          export PATH=$PATH:$PWD/.tmp
          export CMAKE_FLAGS="-GNinja"
          export VPR_NUM_WORKERS=$(nproc)
          make env
          cd build
          ninja -j$(nproc) all_qlf_k4n8_tests_adder

  install:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: 'true'
          submodules: true
      - name: Architectures definitions installation
        run: |
          sudo rm -rf /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
          sudo apt update
          sudo apt install -y g++-8 gcc-8 colordiff coreutils graphviz inkscape make git git-lfs unzip cmake
          mkdir .tmp
          curl -L https://github.com/ninja-build/ninja/releases/download/v1.10.0/ninja-linux.zip -o .tmp/ninja-linux.zip
          unzip .tmp/ninja-linux.zip -d .tmp
          export PATH=$PATH:$PWD/.tmp
          export ROOT=$(pwd)
          export INSTALL_DIR=quicklogic-arch-defs
          export GITHASH=$(git rev-parse --short HEAD)
          mkdir ${ROOT}/${INSTALL_DIR}
          export CMAKE_FLAGS="-GNinja -DINSTALL_FAMILIES=qlf_k4n8,qlf_k6n10 -DCMAKE_INSTALL_PREFIX=${ROOT}/${INSTALL_DIR}"
          export VPR_NUM_WORKERS=$(nproc)
          make env
          cd build
          ninja install -j$(nproc)
          # Testing binary toolchain
          export CTEST_OUTPUT_ON_FAILURE=1
          ctest -R binary_toolchain_test_*
          cd ${ROOT}
          tar -acf quicklogic-arch-defs-qlf-${GITHASH}.tar.gz ${INSTALL_DIR}/*
      - uses: actions/upload-artifact@v2
        with:
          name: ql-arch-definitions
          path: |
              quicklogic-arch-defs-qlf*.tar.gz

  upload-architectures:
    runs-on: ubuntu-18.04
    needs: install
    steps:

      - uses: actions/download-artifact@v2
      - name: Upload achitectures to bucket
        if: "github.event_name == 'push' && !startsWith(github.ref, 'dependabot/')"

        uses: weslenng/gcp-storage-sync@master
        env:
          GCP_SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_FILE }}
          GCP_STORAGE_BUCKET: ${{ secrets.GCP_STORAGE_BUCKET }}
          SOURCE_DIR: "ql-arch-definitions"

      - name: Generate latest file
        run: |
          export FILE=$(ls ql-arch-definitions)
          echo "https://storage.googleapis.com/symbiflow-arch-defs-install/${FILE}" > latest-qlf
      - uses: actions/upload-artifact@v2
        with:
          name: latest-package
          path: |
            latest-qlf

  upload-latest:
    runs-on: ubuntu-18.04
    needs: [build, upload-architectures]
    steps:

      - uses: actions/download-artifact@v2
      - name: Upload latest file to bucket
        if: github.event_name == 'push'

        uses: weslenng/gcp-storage-sync@master
        env:
          GCP_SERVICE_ACCOUNT_KEY_FILE: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY_FILE }}
          GCP_STORAGE_BUCKET: ${{ secrets.GCP_STORAGE_BUCKET }}
          SOURCE_DIR: "latest-package"

